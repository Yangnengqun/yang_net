Net(
  (encoder): Encoder(
    (patch_embed): PatchEmbed(
      (proj): Conv2d(3, 40, kernel_size=(2, 2), stride=(2, 2), bias=False)
      (norm): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (stage0): BasicStage(
      (blocks): Sequential(
        (0): MLPBlock(
          (drop_path): Identity()
          (spatial_mixing): Partial_conv3(
            (partial_conv3): Conv2d(10, 10, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          )
          (mlp): Sequential(
            (0): Conv2d(40, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
            (3): Conv2d(80, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
        )
      )
    )
    (merge0): PatchMerging(
      (reduction): Conv2d(40, 80, kernel_size=(2, 2), stride=(2, 2), bias=False)
      (norm): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (stage1): BasicStage(
      (blocks): Sequential(
        (0): MLPBlock(
          (drop_path): DropPath(drop_prob=0.010)
          (spatial_mixing): Partial_conv3(
            (partial_conv3): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          )
          (mlp): Sequential(
            (0): Conv2d(80, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
            (3): Conv2d(160, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
        )
        (1): MLPBlock(
          (drop_path): DropPath(drop_prob=0.020)
          (spatial_mixing): Partial_conv3(
            (partial_conv3): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          )
          (mlp): Sequential(
            (0): Conv2d(80, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
            (3): Conv2d(160, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
        )
      )
    )
    (merge1): PatchMerging(
      (reduction): Conv2d(80, 160, kernel_size=(2, 2), stride=(2, 2), bias=False)
      (norm): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (stage2): BasicStage(
      (blocks): Sequential(
        (0): MLPBlock(
          (drop_path): DropPath(drop_prob=0.030)
          (spatial_mixing): Partial_conv3(
            (partial_conv3): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          )
          (mlp): Sequential(
            (0): Conv2d(160, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
            (3): Conv2d(320, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
        )
        (1): MLPBlock(
          (drop_path): DropPath(drop_prob=0.040)
          (spatial_mixing): Partial_conv3(
            (partial_conv3): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          )
          (mlp): Sequential(
            (0): Conv2d(160, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
            (3): Conv2d(320, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
        )
        (2): MLPBlock(
          (drop_path): DropPath(drop_prob=0.050)
          (spatial_mixing): Partial_conv3(
            (partial_conv3): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          )
          (mlp): Sequential(
            (0): Conv2d(160, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
            (3): Conv2d(320, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
        )
        (3): MLPBlock(
          (drop_path): DropPath(drop_prob=0.060)
          (spatial_mixing): Partial_conv3(
            (partial_conv3): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          )
          (mlp): Sequential(
            (0): Conv2d(160, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
            (3): Conv2d(320, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
        )
        (4): MLPBlock(
          (drop_path): DropPath(drop_prob=0.070)
          (spatial_mixing): Partial_conv3(
            (partial_conv3): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          )
          (mlp): Sequential(
            (0): Conv2d(160, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
            (3): Conv2d(320, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
        )
        (5): MLPBlock(
          (drop_path): DropPath(drop_prob=0.080)
          (spatial_mixing): Partial_conv3(
            (partial_conv3): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          )
          (mlp): Sequential(
            (0): Conv2d(160, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
            (3): Conv2d(320, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
        )
        (6): MLPBlock(
          (drop_path): DropPath(drop_prob=0.090)
          (spatial_mixing): Partial_conv3(
            (partial_conv3): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          )
          (mlp): Sequential(
            (0): Conv2d(160, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
            (3): Conv2d(320, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
        )
        (7): MLPBlock(
          (drop_path): DropPath(drop_prob=0.100)
          (spatial_mixing): Partial_conv3(
            (partial_conv3): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          )
          (mlp): Sequential(
            (0): Conv2d(160, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
            (3): Conv2d(320, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
        )
      )
    )
    (output_conv): Conv2d(160, 20, kernel_size=(1, 1), stride=(1, 1))
  )
  (decoder): Decoder(
    (apn): APN_Module(
      (branch1): Sequential(
        (0): AdaptiveAvgPool2d(output_size=1)
        (1): Conv2dBnRelu(
          (conv): Sequential(
            (0): Conv2d(160, 20, kernel_size=(1, 1), stride=(1, 1))
            (1): BatchNorm2d(20, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
          )
        )
      )
      (mid): Sequential(
        (0): Conv2dBnRelu(
          (conv): Sequential(
            (0): Conv2d(160, 20, kernel_size=(1, 1), stride=(1, 1))
            (1): BatchNorm2d(20, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
          )
        )
      )
      (down1): Conv2dBnRelu(
        (conv): Sequential(
          (0): Conv2d(160, 1, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3))
          (1): BatchNorm2d(1, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
      (down2): Conv2dBnRelu(
        (conv): Sequential(
          (0): Conv2d(1, 1, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2))
          (1): BatchNorm2d(1, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
      (down3): Sequential(
        (0): Conv2dBnRelu(
          (conv): Sequential(
            (0): Conv2d(1, 1, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (1): BatchNorm2d(1, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
          )
        )
        (1): Conv2dBnRelu(
          (conv): Sequential(
            (0): Conv2d(1, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): BatchNorm2d(1, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
          )
        )
      )
      (conv2): Conv2dBnRelu(
        (conv): Sequential(
          (0): Conv2d(1, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
          (1): BatchNorm2d(1, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
      (conv1): Conv2dBnRelu(
        (conv): Sequential(
          (0): Conv2d(1, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
          (1): BatchNorm2d(1, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
    )
  )
)